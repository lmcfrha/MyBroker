//  ********************************************************************
//  ************************ Read Users List *************************
//  ********************************************************************
// Get the list of users, for display. 
// The list is returned from the GET admin/users.

      function listUsers() {
// This function fetches the list of profiles from the DB and sets the update profile table callback
        try {
             $.when( $.ajax({ method: 'GET', url: 'admin/users', datatype: 'json' }) )
              .then(updateUsersTable);
        }
        catch(e) {
          alert(e);
        }        
      }

      function updateUsersTable(response, status, xhr)
        { 
           if (status == 'success') 
              { console.log(response);
              
                usersList = new Map(); // key is username
                
                var arrayLength = response.length;
                $("#usersTable tr:gt(0)").remove();
                var table = document.getElementById('usersTable');
    		    for (var i = 0; i < arrayLength; i++) {
    		    
    		       let aUser = new User(response[i].username);
    		       aUser.email = response[i].email;
    		       aUser.firstname = response[i].firstname;
    		       aUser.lastname = response[i].lastname;
    		       aUser.type = response[i].type;
    		       aUser.status = response[i].status;
    		       aUser.creationDate = response[i].creationdate;
    		       usersList.set(aUser.username, aUser);
    		       
                   var row = table.insertRow();
                   var username=row.insertCell();
                   username.innerHTML=aUser.username;
                   var email=row.insertCell();
                   email.innerHTML=aUser.email;
                   var type=row.insertCell();
                   type.innerHTML=aUser.type;
                   var manage=row.insertCell(); 
// The old way to do it ...when I didn't know better:                   
//                   manage.innerHTML='<button id="manage" onclick="manageUser(\''+response[i].username+'\')"><img src="https://img.icons8.com/color/48/000000/folder-invoices.png" alt="Manage"></button>';        		     
//                   manage.innerHTML='<button id="manage"><img src="https://img.icons8.com/color/48/000000/folder-invoices.png" alt="Manage"></button>'; 
// And from now on, a little more professional:
                   var theIcon = document.createElement("img");
                   theIcon.src = "https://img.icons8.com/color/48/000000/folder-invoices.png";
                   theIcon.alt = "Manage";
                   manage.appendChild(theIcon);
                   const idx = i;
                   theIcon.addEventListener("click", function(){manageUser(aUser);});  
// Notice the "let aUser" line: this is because if you just use var aUser, the way closure works,
// you'd end up with all cells with the same event listener handler using the same value of aUser, which 
// would be the one at the end of the for loop. Note that const would also work. Also the var scope if the function whereas
// the let scope if the block only.
   		     
                   }
                // Send all divs to background, bring the one we're interested to front.
                rstZindex();
                userListDiv.style.zIndex = 10;
                console.log(usersList);
              }
           else throw "status";
        }
              
//  ********************************************************************
//  *********************** Manage User *****************************
//  ********************************************************************

/* Function handling the button to view the user accounts (zoom to user) */      
      function manageUser(user) {
        
        $("#titleManagedUser").html(user.firstname+" "+user.lastname);
// Go fetch the accounts and add table to page.
		try {
             $.when( $.ajax({ method: 'GET', url: 'admin/users/'+user.username+'/accounts', datatype: 'json' }) )
              .then(updateAccountsUserTable);
        }
        catch(e) {
          alert(e);
        }        
// Pop up the div on top
        rstZindex();
        manageUserDiv.style.zIndex = 10;        
        
      }
      
  
  ///// Display user accounts and build accounts objects 
     
      function updateAccountsUserTable(response, status, xhr) {
      
           if (status == 'success') 
           { 
              var arrayLength = response.records.length;
              if (arrayLength === 0) {
                 $("#userAccountsTable tr:gt(1)").remove();
                 theUser = usersList.get(response.username);
                 theUser.accounts.clear();
                 return;
           }
              
////////////////////////////////////////////////
// Extract the set of accountid's for the user and build the user object          
// So: retrieve the user object from the usersList created when Users was pressed, and populate the accounts map
// with [(accountNo) -> [ (profilename) -> [ (tickername) -> [Ticker Object] ] ]. This is a map of a map of a map.
// From stackoverflow, not necessarily the best but not the worst.

           var arrayLength = response.records.length;
           theUser = usersList.get(response.username);
           theUser.accounts.clear();  // clean up the accounts map before repopulating  with profiles                 
           for (var i = 0; i < arrayLength; i++) {
               let aTicker = new TickerObject(response.records[i].symbol,response.records[i].exchange);
                    aTicker.units = response.records[i].units;
                    if (theUser.accounts.has(response.records[i].accountid)) {
                       if (theUser.accounts.get(response.records[i].accountid).has(response.records[i].profilename)) {
                          theUser.accounts.get(response.records[i].accountid).get(response.records[i].profilename).set(aTicker.symbol, aTicker);
                       } 
                       else {
                          let aProfile = new Map();
                          aProfile.set(aTicker.symbol, aTicker);
                          theUser.accounts.get(response.records[i].accountid).set(response.records[i].profilename,aProfile);
                       }   
                    } 
                    else {
                       let aProfile = new Map();
                       aProfile.set(aTicker.symbol, aTicker);
                       let accountProfiles = new Map();
                       accountProfiles.set(response.records[i].profilename, aProfile);
                       theUser.accounts.set(response.records[i].accountid, accountProfiles);
                    }  
       
                }
// Insert new user object in the (global) users list, keeping everything up to date.
                usersList.set(response.username, theUser);
                
                let accountIt = theUser.accounts.keys();
 
           
// Now display user accounts/profiles
// Clean up the table from previous user
                $("#userAccountsTable tr:gt(1)").remove();
              // Add the rows for AccountId's
                let accountNo = accountIt.next();
                do {
                   var lastRow = document.getElementById("userAccountsTable").querySelector("tbody > tr:last-child");
                   var addRow = document.createElement("tr");
                   var addCell = document.createElement("td");
                   addCell.setAttribute("colspan", "7");
                   addCell.className = "accountId";
                   addCell.id = addCell.innerHTML = accountNo.value;
                   addRow.appendChild(addCell);
                   lastRow.after(addRow);
                   // List profiles of the account:
                   let userProfiles = theUser.accounts.get(accountNo.value);
                   let profilesIt = userProfiles.keys();
                   let profileName = profilesIt.next();
                   do {
                      lastRow = document.getElementById("userAccountsTable").querySelector("tbody > tr:last-child");
                      addRow = document.createElement("tr");
                      addCell = document.createElement("td");
                      addCell.id = addCell.innerHTML = profileName.value;
                      addRow.appendChild(addCell);
                      let accountProfileValue = theUser.getAccountProfileValue(accountNo.value, profileName.value, tickerTape);
                      addCell = document.createElement("td");
                      addCell.id = addCell.innerHTML = accountProfileValue.total;
                      addRow.appendChild(addCell);
                      addCell = document.createElement("td");
                      addCell.id = addCell.innerHTML = accountProfileValue.cash;
                      addRow.appendChild(addCell);
                      
                      addCell = document.createElement("td");
                      let theIcon = document.createElement("img");
                      theIcon.src = "https://img.icons8.com/dusk/48/000000/deposit.png";
                      theIcon.alt = "Deposit";
                      addCell.appendChild(theIcon);
                      theIcon.addEventListener("click", function(){deposit();}); 
                      addRow.appendChild(addCell);
                      
                      addCell = document.createElement("td");
                      theIcon = document.createElement("img");
                      theIcon.src = "https://img.icons8.com/dusk/48/000000/withdrawal.png";
                      theIcon.alt = "Withdrawal";
                      addCell.appendChild(theIcon);
                      theIcon.addEventListener("click", function(){withdraw();}); 
                      addRow.appendChild(addCell);
                      
                      addCell = document.createElement("td");
                      theIcon = document.createElement("img");
                      theIcon.src = "https://img.icons8.com/dusk/48/000000/delete-forever.png";
                      theIcon.alt = "Close";
                      addCell.appendChild(theIcon);
                      theIcon.addEventListener("click", function(){closedown();}); 
                      addRow.appendChild(addCell);
                      
                      addCell = document.createElement("td");
                      theIcon = document.createElement("img");
                      theIcon.src = "https://img.icons8.com/nolan/48/000000/scales.png";
                      theIcon.alt = "Rebalance";
                      addCell.appendChild(theIcon);
                      theIcon.addEventListener("click", function(){rebalance();}); 
                      addRow.appendChild(addCell);
                      
                      lastRow.after(addRow);                     
                      profileName = profilesIt.next();
                   } while (!profileName.done);
                   accountNo = accountIt.next();
                } while (!accountNo.done);
              
           }
           else {
              $("#userAccountsTable tr:gt(1)").remove();
              throw "status";
           }
      
      }
