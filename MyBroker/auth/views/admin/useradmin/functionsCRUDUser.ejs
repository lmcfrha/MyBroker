//  ********************************************************************
//  ************************ Read Users List *************************
//  ********************************************************************
// Get the list of users, for display. 
// The list is returned from the GET admin/users.

      function listUsers() {
// This function fetches the list of profiles from the DB and sets the update profile table callback
        try {
             $.when( $.ajax({ method: 'GET', url: 'admin/users', datatype: 'json' }) )
              .then(updateUsersTable);
        }
        catch(e) {
          alert(e);
        }        
      }

      function updateUsersTable(response, status, xhr)
        { 
           if (status == 'success') 
              { console.log(response);
                var arrayLength = response.length;
                $("#usersTable tr:gt(0)").remove();
                var table = document.getElementById('usersTable');
    		    for (var i = 0; i < arrayLength; i++) {
                   var row = table.insertRow();
                   var username=row.insertCell();
                   username.innerHTML=response[i].username;
                   var email=row.insertCell();
                   email.innerHTML=response[i].email;
                   var type=row.insertCell();
                   type.innerHTML=response[i].type;
                   var manage=row.insertCell(); 
// The old way to do it ...when I didn't know better:                   
//                   manage.innerHTML='<button id="manage" onclick="manageUser(\''+response[i].username+'\')"><img src="https://img.icons8.com/color/48/000000/folder-invoices.png" alt="Manage"></button>';        		     
//                   manage.innerHTML='<button id="manage"><img src="https://img.icons8.com/color/48/000000/folder-invoices.png" alt="Manage"></button>'; 
// And from now on, a little more professional:
                   var theIcon = document.createElement("img");
                   theIcon.src = "https://img.icons8.com/color/48/000000/folder-invoices.png";
                   theIcon.alt = "Manage";
                   manage.appendChild(theIcon);
                   const idx = i;
                   theIcon.addEventListener("click", function(){manageUser(response[idx]);});  
// Notice the "const idx" line: this is because if you just use "i", the way closure works,
// you'd end up with all cells with the same event listener handler using the same value of i, which 
// would be the one at the end of the for loop. On top of it, that value would be outside the range
// of response[]. Man that was hard to find...
   		     
                   }
                // Send all divs to background, bring the one we're interested to front.
                rstZindex();
                userListDiv.style.zIndex = 10;
              }
           else throw "status";
        }
              
//  ********************************************************************
//  *********************** Manage User *****************************
//  ********************************************************************

/* Function handling the button to create a new profile - it creates a Profile object */      
      function manageUser(user) {
        console.log(user);
        $("#titleManagedUser").html(user.firstname+" "+user.lastname);
// Go fetch the accounts and add table to page.
        rstZindex();
        manageUserDiv.style.zIndex = 10;        
        
//        $("#profileList").scrollTop(0);
//        newProfile= new Profile('temp','F'); /* Create a temp Profile object with Low risk */        

      }
      
//  ********************************************************************
//  ************************ Edit User ******************************
//  ********************************************************************     
//  Function handling the button to edit a profile (from the profile list).
//  Fetches the profile data, for editing. The profile is returned from the GET /admin/profile.

    function editUser(user) {
    <!-- This function turns the table into a JSON object and saves the new profile in the DB -->
        try {
             $.when( $.ajax({ method: 'GET', url: 'admin/profile', data: {name: profilename}, datatype: 'json' }) )
              .then(editProfileTable);
        }
        catch(e) {
          alert(e);
        }        
      }
// Once the profile is returned, display it in the profile edit div which is brought in the foreground:
      function editProfileTable(response, status, xhr)
        { 
           if (status == 'success') 
              { console.log(response);
                updateProfileName(response[0].profilename,response[0].risk);
                loadTickerRows('updateProfileTickers',response);
              }
           else throw "status";
        }
        
      function updateProfileName(name,risk) {        
        updateProfileDiv.style.zIndex=10; /* Bring profile update div up front */
        $("#profileList").scrollTop(0);      
        modProfile= new Profile(name,risk); 
        document.getElementById('updateProfileName').innerHTML=name;
        document.getElementById('updateProfileRisk').innerHTML=risk;
        console.log(modProfile);
      }
      


//  ********************************************************************
//  ************************ Delete Profile ****************************
//  ********************************************************************           
//  Function handling the button to delete a profile (from the profile list).
//  Invokes DELETE /admin/profile with the profilename.
//  Deletion logic: 
//  - if no users have the profile, delete it immediately
//  - do not offer the profile to users anymore 
//  - if at least 1 user has the profile, set to 0 all targets (100% cash).
//  - after the next rebalance, transfer the profile 100% cash in the user account and delete the profile.

    function deleteProfile(profilename) {
        if (confirm("You are about to delete profile "+profilename+". Press OK to confirm deletion, or Cancel")) {

        try {
             $.when( $.ajax({ method: 'DELETE', url: `admin/profile/${profilename}`, datatype: 'json' }) )
              .then(deleteProfileTable);
        }
        catch(e) {
          alert(e);
        }   
        
        }     
      }
// Once the profile is returned, display it in the profile edit div which is brought in the foreground:
      function deleteProfileTable(response, status, xhr)
        { 
           try {
             if (status == 'success') 
              { console.log(response);
                if ( response.includes('PROFILE TARGETS ARE RESET TO 0') ) {
                console.log("Throw :"+response);
                throw response;
                }              
                listProfiles();
                location.reload();
              }
             else throw "status";
           }
           catch(e) {
             alert(e);
           }   
        }  
        
        
//  ********************************************************************
//  ************************ Rebalance Profile ****************************
//  ********************************************************************           
//  Function handling the button to rebalance a profile (from the profile list).
//  Invokes POST /admin/rebalance with the profilename.
//  
//
//

    function rebalanceProfile(profilename) {
      if (confirm("You are about to rebalance profile "+profilename+". Press OK to confirm deletion, or Cancel")) {

        try {
             var postdata = {profile:profilename};
             console.log(postdata);
             $.when( $.ajax({ method: 'POST', url: `accounts/rebalance`, data: postdata , datatype: 'json' }) )
              .then(rebalanceProfileDone);
        }
        catch(e) {
          alert(e);
        }   
        
      }     
     }
// Once the profile is returned, display it in the profile edit div which is brought in the foreground:
      function rebalanceProfileDone(response, status, xhr)
        { 
          if (status == 'success') 
              {console.log(response);}
        }  