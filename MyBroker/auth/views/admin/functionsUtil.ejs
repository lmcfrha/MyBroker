 /* This function adds the first row of the table - the CASH row.
    t:  the id of the table
    id: the id to set on the cell which will contain
        the % of cash in the profile (intially 100)
    tclass: the class to set on the cell which will contain the cash %
*/
      function addCashRow(t,id,tclass){
        var table = document.getElementById(t);
        var row = table.insertRow();
        symbol=row.insertCell();
        symbol.setAttribute('contenteditable','false');
        symbol.setAttribute('class','tickerSymbol');
        symbol.innerHTML="CASH";
        var exchange=row.insertCell();
        exchange.setAttribute('contenteditable','false');
        exchange.innerHTML="N/A";
        var target=row.insertCell();
        target.setAttribute('contenteditable','false');
        target.setAttribute('class',tclass);
        target.setAttribute('id', id);
        target.innerHTML="100";
        var stockPrice=row.insertCell();
/*        stockPrice.setAttribute('class','stockPrice'); */
        stockPrice.setAttribute('contenteditable','false');
        stockPrice.innerHTML="1";

      }
      
/* Function adding a table row on table profileTickers for adding a ticker */      
      function addTickerRow(t,tc,tclass){
        var table = document.getElementById(t);
        var row = table.insertRow();
        symbol=row.insertCell();
        symbol.setAttribute('contenteditable','true');
        symbol.setAttribute('class','tickerSymbol');
        symbol.setAttribute('onfocus',`cleanupStockPrice(\"${t}_price_${row.rowIndex}\")`);
        var exchange=row.insertCell();
        exchange.setAttribute('contenteditable','true');
        exchange.innerHTML="TSX";
        var target=row.insertCell();
        target.setAttribute('contenteditable','true');
        target.innerHTML=0;
        target.setAttribute('class',tclass);
        target.setAttribute('onblur','recalculate("'+tc+'","'+tclass+'")');
        var stockPrice=row.insertCell();
        stockPrice.setAttribute('class','stockPrice');  
        stockPrice.setAttribute('id',`${t}_price_${row.rowIndex}`);
             
      }
      
      function loadTickerRows(tickertable,tickerlist){
        var arrayLength = tickerlist.length; 
        var table = document.getElementById(tickertable);
        for (var i = 0; i < arrayLength; i++) {
          if (tickerlist[i].symbol != 'CASH' ) {
            var row = table.insertRow();
            symbol=row.insertCell();
            symbol.setAttribute('contenteditable','true');
            symbol.setAttribute('class','tickerSymbol');
 // When clicking on the stock symbol cell, clean up the live update price cell (end of row)
 // (to prepare for the eventual new symbol..            
            symbol.setAttribute('onfocus',`cleanupStockPrice(\"loadTable_price_${row.rowIndex}\")`);
            symbol.innerHTML=tickerlist[i].symbol;
            var exchange=row.insertCell();
            exchange.setAttribute('contenteditable','true');
            exchange.innerHTML=tickerlist[i].exchange;
            var target=row.insertCell();
            target.setAttribute('contenteditable','true');
            target.innerHTML=tickerlist[i].target;
            target.setAttribute('class','updateTargetClass');
// after adding a new ticker, when quitting its target cell, recalculate the cash target and update it
            target.setAttribute('onblur','recalculate("updateTargetCash","updateTargetClass")');
            var stockPrice=row.insertCell();
            stockPrice.setAttribute('class','stockPrice'); /* stockPrice class used locate where to put the ticker value */
            stockPrice.setAttribute('id',`loadTable_price_${row.rowIndex}`);
          }
        } 
        recalculate('updateTargetCash','updateTargetClass');     
      }

/* tc:     the Cash target cell id (to update)
   tclass: the class shared by all the stocks target cells.
All the stocks target cells have the same tclass (cash target cells
which was want to calculate has their own class) - that's what makes 
it easy to select them with getElementsByClassName:
*/
      function recalculate(tc,tclass) {
        console.log('recalculate....')
           var targets = document.getElementsByClassName(tclass);
           var targetCash = document.getElementById(tc);
        	 let sum=Number(0); 
        try {
           for (i=0;i<targets.length;i++) {
             sum=sum+Number(targets[i].innerText);
             if (sum > 100) throw("Targets>100%!");
           }
           targetCash.innerText = 100 - sum;
        }
        catch (e) {
 /*          alert(e); */
             targetCash.innerText = "";
           $( "#over100" ).dialog("open");
        }
      }
      
      function cleanupStockPrice(id) {
         document.getElementById(id).innerHTML="";
      }   
         