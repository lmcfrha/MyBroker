<script>

function TickerObject(symbol,exch) {
   this.symbol = symbol;
   this.exch = exch;

}

function ProfileObject(name) {
   this.name = name;
   this.risk = null;
   this.cashTarget = 100;
   this.tickers = [];
}
ProfileObject.prototype.addTicker = function(ticker,target) {
   if (ticker.symbol != "CASH" && (this.cashTarget - target) >= 0 ) {
      this.cashTarget = this.cashTarget - target;
      ticker.target = target;
      this.tickers.push(ticker);
   }
   else {
      if (ticker.symbol != "CASH") {alert('Cash target cannot go negative, lower stock targeted %');}
   }
}

function Account() {
   this.number = null;
   this.profilesDistributions = new Map(); // a Map - Key is the profile name, value is the list of [ticker,units]
}
Account.prototype.rebalance = function(profile) {
};
Account.prototype.rebalanceAll = function() {
};
Account.prototype.addProfile = function(profile,amount) {
}
Account.prototype.drawCash = function(profile,amount) {
}
Account.prototype.closeProfile = function(profile) {
}
Account.prototype.closeAccount = function() {
}




function User(username) {
  this.username = username;
  this.firstname = null;
  this.lastname = null;
  this.salt = null;
  this.hash = null;
  this.email = null;
  this.status = null;
  this.type = null;
  this.creationDate = null;
  this.accounts = new Map();  
}
User.prototype.getAccountProfileValue = function(account, profile, livefeed) {
  let profileDistribution = this.accounts.get(account).get(profile);
  let profileDistIt = profileDistribution.keys();
  let ticker = profileDistIt.next();
  let accountProfileValue = 0;

  do {
     if (ticker.value === 'CASH') { 
       accountProfileValue = accountProfileValue + profileDistribution.get(ticker.value).units;
     } 
     else {
       accountProfileValue = accountProfileValue + profileDistribution.get(ticker.value).units*livefeed[ticker.value];
     }
     ticker = profileDistIt.next();
  } while (!ticker.done)
  return accountProfileValue;

}
User.prototype.getAccountValue = function(account, livefeed) {
      this.accounts.get(account)
}
User.prototype.getTotalValue = function(livefeed) {
}
User.prototype.opAccountProfile = function(account, type, profile, amount ) {
}
User.prototype.rebalanceAccountProfile = function(account, profile) {
}
User.prototype.rebalanceAccount = function(account) {
}
User.prototype.rebalanceAll = function(account) {
}

//////////// Global object creation for use by admin web page ////////
// Profiles map contain all profiles and their description (stocks, targets, exchange):
profileMap = new Map();
//////////////////////////////////////////////////////////////////////
</script>